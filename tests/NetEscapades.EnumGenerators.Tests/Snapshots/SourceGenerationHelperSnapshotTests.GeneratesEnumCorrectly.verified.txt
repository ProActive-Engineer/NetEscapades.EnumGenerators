//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
namespace Something.Blah
{
    public static partial class ShortName
    {
        public static bool IsDefined(this Something.Blah.ShortName value)
            => value switch
            {
                Something.Blah.ShortName.First => true,
                Something.Blah.ShortName.Second => true,
                _ => false,
            };

        public static string ToStringFast(this Something.Blah.ShortName value)
            => value switch
            {
                Something.Blah.ShortName.First => nameof(Something.Blah.ShortName.First),
                Something.Blah.ShortName.Second => nameof(Something.Blah.ShortName.Second),
                _ => value.ToString(),
            };

        public static bool TryParse(string name, bool ignoreCase, out Something.Blah.ShortName value)
            => ignoreCase ? TryParseIgnoreCase(name, out value) : TryParse(name, out value);

        private static bool TryParseIgnoreCase(string name, out Something.Blah.ShortName value)
        {
            switch (name)
            {
                case { } s when s.Equals(nameof(Something.Blah.ShortName.First), System.StringComparison.OrdinalIgnoreCase):
                    value = Something.Blah.ShortName.First;
                    return true;
                case { } s when s.Equals(nameof(Something.Blah.ShortName.Second), System.StringComparison.OrdinalIgnoreCase):
                    value = Something.Blah.ShortName.Second;
                    return true;
                default:
                    value = default;
                    return false;
            }
        }

        public static bool TryParse(string name, out Something.Blah.ShortName value)
        {
            switch (name)
            {
                case nameof(Something.Blah.ShortName.First):
                    value = Something.Blah.ShortName.First;
                    return true;
                case nameof(Something.Blah.ShortName.Second):
                    value = Something.Blah.ShortName.Second;
                    return true;
                default:
                    value = default;
                    return false;
            }
        }

        public static Something.Blah.ShortName[] GetValues()
        {
            return new[]
            {
                Something.Blah.ShortName.First,
                Something.Blah.ShortName.Second,
            };
        }

        public static string[] GetNames()
        {
            return new[]
            {
                nameof(Something.Blah.ShortName.First),
                nameof(Something.Blah.ShortName.Second),
            };
        }
    }
}